zabbix:
# Default values for zabbix.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configurations
  global:
    # -- Reference to one or more secrets to be used when pulling images.
    #
    # For example:
    #  imagePullSecrets:
    #    - name: "image-pull-secret"
    imagePullSecrets: []

    # -- Labels to apply to all resources.
    commonLabels: {}

# -- Zabbix components (server, agent, web frontend, ...) image tag to use.
#This helm chart is compatible with non-LTS version of Zabbix, that include important changes and functionalities.
#But by default this helm chart will install the latest LTS version (example: 6.0.x).
#See more info in [Zabbix Life Cycle & Release Policy](https://www.zabbix.com/life_cycle_and_release_policy) page
#When you want use a non-LTS version (example: 6.2.x), you have to set this yourself. You can change version
#here or overwrite in each component (example: zabbixserver.image.tag, etc).
  zabbixImageTag: ubuntu-6.0.30

# **Zabbix Postgresql access / credentials** configurations
# with this dict, you can set unified PostgreSQL access credentials, IP and so on for both Zabbix Server and Zabbix web frontend
# you can either chose from having all this in one named (preexisting) secret or setting the values one by one with vars
# whatever set here overrides the credential settings within the "zabbixServer" and "zabbixWeb" sections.
  postgresAccess:
    # under this section you can configure PostgreSQL access and credentials centrally for the entire helm chart.
    # All relevant components installed by this chart will respect it: zabbixServer, zabbixWeb and postgresql (if enabled)
    #
    # USING ONE SECRET CONTAINING ALL DB RELEVANT SETTINGS
    # PostgreSQL access details all in one existing secret (matches the structure of secrets the CrunchyData pgo operator generates)
    # if this option is chosen the below listed settings are being ignored
    # the secret must contain the following keys:
    #   * host
    #   * port
    #   * user
    #   * password
    #   * database
    # -- Whether to use the unified PostgreSQL access secret
    useUnifiedSecret: true
    # -- Name of one secret for unified configuration of PostgreSQL access
    unifiedSecretName: zabbixdb-pguser-zabbix
    # -- automatically create secret if not already present (works only in combination with postgresql.enabled=true)
    unifiedSecretAutoCreate: true
    #
    # If you do NOT want to use one unified secret for all settings, you can still set the credentials manually here.
    # These settings will be used for all components of this chart where it makes sense (zabbix server, postgresql,
    # web frontend, ...)
    # -- Address of database host - ignored if postgresql.enabled=true
    host: "zabbix-postgresql"
    # -- Port of database host - ignored if postgresql.enabled=true
    port: "5432"
    # -- User of database
    user: "zabbix"
    # -- Name of a secret used for Postgres Password, if set, it overrules the POSTGRES_PASSWORD value
    #passwordSecret: mysecret
    # -- Key of the secret used for Postgres Password, requires POSTGRES_PASSWORD_SECRET, defaults to password
    #passwordSecretKey: "password"
    # -- Password of database - ignored if passwordSecret is set
    password: "zabbix"
    # -- Name of database
    database: "zabbix"

# **Zabbix Server** configurations
  zabbixServer:
    # -- Enables use of **Zabbix Server**
    enabled: true
    # -- Number of replicas of ``zabbixServer`` module
    replicaCount: 1
    # -- Set permissive podAntiAffinity to spread replicas over cluster nodes if replicaCount>1
    podAntiAffinity: true
    # -- Optional set true open a port direct on node where Zabbix Server runs
    hostPort: false
    # -- Optional set hostIP different from 0.0.0.0 to open port only on this IP
    hostIP: 0.0.0.0
    # -- Requests and limits of pod resources. See: [https://kubernetes.io/docs/concepts/configuration/manage-resources-containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers)
    resources: {}
    image:
      # -- Zabbix Server Docker image name
      repository: zabbix/zabbix-server-pgsql
      # -- Zabbix Server Docker image tag, if you want to override zabbixImageTag
      tag: null
      # -- Pull policy of Docker image
      pullPolicy: IfNotPresent
      # -- List of dockerconfig secrets names to use when pulling images
      pullSecrets: []
    # -- Automatically clean orphaned ha nodes from ha_nodes db table
    haNodesAutoClean:
      enabled: true
      image:
        # -- Postgresql Docker image name: chose one of "postgres" or "timescale/timescaledb"
        repository: postgres
        # -- Tag of Docker image of Postgresql server, choice "15" for postgres "2.10.3-pg15" for timescaledb
        # (Zabbix supports TimescaleDB 2.0.1-2.10.x. More info: https://www.zabbix.com/documentation/6.0/en/manual/installation/requirements)
        # Added support for PostgreSQL versions 15.x since Zabbix 6.0.10
        tag: 15
        pullPolicy: IfNotPresent
        pullSecrets: []
      schedule: "0 1 * * *"
      concurrencyPolicy: "Replace"
      deleteOlderThanSeconds: 3600
      # -- Requests and limits of pod resources. See: [https://kubernetes.io/docs/concepts/configuration/manage-resources-containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers)
      resources: {}
      # -- Extra environment variables. A list of additional environment variables.
      extraEnv: []
      # -- Additional volumeMounts to the cronjob hanodes autoclean
      extraVolumeMounts: []
      # -- Additional containers to start within the cronjob hanodes autoclean
      extraContainers: []
      # -- Additional init containers to start within the cronjob hanodes autoclean
      extraInitContainers: []
      # -- Additional volumes to make available to the cronjob hanodes autoclean
      extraVolumes: []
      # -- Additional specifications to the cronjob hanodes autoclean
      extraPodSpecs: {}
      # -- Security Context configurations. Reference: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
      securityContext: {}
      # -- Labels to add to the cronjob for ha nodes autoclean
      cronjobLabels: {}
    jobDBSchema:
      # -- Annotations to add to the jobs
      jobAnnotations: {}
      # -- Labels to add to the jobs
      jobLabels: {}
      # -- Additional init containers to start within the Zabbix Server Job DB Schema pod
      extraInitContainers: []
      # -- Additional containers to start within the Zabbix Server Job DB Schema pod
      extraContainers: []
      # -- Additional specifications to the Zabbix Server Job DB Schema pod
      extraPodSpecs: {}
      # -- Additional volumeMounts to the Zabbix Server Job DB Schema pod
      extraVolumeMounts: []
      # -- Additional volumes to make available to the  Zabbix Server Job DB Schema pod
      extraVolumes: []
      # -- Security Context configurations. Reference: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
      securityContext: {}
    service:
      # -- Type of service to expose the application. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. 
      #More details: https://kubernetes.io/docs/concepts/services-networking/service/
      type: LoadBalancer
      # -- clusterIP is the IP address of the service and is usually assigned randomly. 
      #If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service.
      clusterIP: ""
      # -- externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses 
      #(NodePorts, ExternalIPs, and LoadBalancer IPs). "Local" to preserve sender's IP address. Please note that this might not work on multi-node clusters, 
      #depending on your network settings.
      #externalTrafficPolicy: Local
      # -- externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service. 
      #These IPs are not managed by Kubernetes.
      externalIPs: []
      # -- Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying 
      #the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
      loadBalancerIP: ""
      # -- If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer 
      #will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.
      loadBalancerSourceRanges: []
      # -- loadBalancerClass is the class of the load balancer implementation this Service belongs to. 
      #If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or 
      #"example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. 
      #If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, 
      #but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services 
      #with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. 
      #This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. 
      #This field will be wiped when a service is updated to a non 'LoadBalancer' type.
      loadBalancerClass: ""
      # -- Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. 
      #Must be ClientIP or None. Defaults to None. More info: 
      #https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      sessionAffinity: None
      # -- Port of service in Kubernetes cluster
      port: 10051
      # -- NodePort port to allocate on each node (only if service.type = NodePort or Loadbalancer)
      nodePort: 31051
      # -- Annotations for the zabbix-server service
      annotations: {}
      # metallb.universe.tf/address-pool: production-public-ips
    # -- Extra environment variables. A list of additional environment variables. List can be extended with other environment variables listed here: https://github.com/zabbix/zabbix-docker/tree/6.0/Dockerfiles/server-pgsql/alpine#environment-variables. See example: https://github.com/zabbix-community/helm-zabbix/blob/master/charts/zabbix/docs/example/kind/values.yaml
    extraEnv: []
    #- name: ENABLE_TIMESCALEDB
    #  value: "true"
    # -- Annotations to add to the deployment
    deploymentAnnotations: {}
    # -- Labels to add to the deployment
    deploymentLabels: {}
    # -- Annotations to add to the containers
    containerAnnotations: {}
    # -- Labels to add to the containers
    containerLabels: {}
    # -- Additional volumeMounts to the Zabbix Server container
    extraVolumeMounts: []
    # -- Additional containers to start within the Zabbix Server pod
    extraContainers: []
    # -- Additional init containers to start within the Zabbix Server pod
    extraInitContainers: []
    # -- Additional volumes to make available to the Zabbix Server pod
    extraVolumes: []
    # -- Additional specifications to the Zabbix Server pod
    extraPodSpecs: {}
    # -- Security Context configurations. Reference: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    securityContext: {}
    # -- The kubelet uses liveness probes to know when to restart a container. Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe: {}
    # -- The kubelet uses readiness probes to know when a container is ready to start accepting traffic. Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    readinessProbe: {}
    # -- The kubelet uses startup probes to know when a container application has started.  Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    startupProbe: {}

# **PostgreSQL** configurations
  postgresql:
    # -- Create a database using Postgresql
    enabled: true
    image:
      # -- Postgresql Docker image name: chose one of "postgres" or "timescale/timescaledb"
      repository: postgres
      # -- Tag of Docker image of Postgresql server, choice "15" for postgres "2.11.1-pg15" for timescaledb
      # (Zabbix supports TimescaleDB 2.0.1-2.11.x. More info: https://www.zabbix.com/documentation/6.0/en/manual/installation/requirements)
      # Added support for PostgreSQL versions 15.x since Zabbix 6.0.10
      tag: 15
      # -- Pull policy of Docker image
      pullPolicy: IfNotPresent
      # -- List of dockerconfig secrets names to use when pulling images
      pullSecrets: []
    # -- Requests and limits of pod resources. See: [https://kubernetes.io/docs/concepts/configuration/manage-resources-containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers)
    resources: {}
    persistence:
      # -- Whether to enable persistent storage for the postgres container or not
      enabled: true
      # -- Existing persistent volume claim name to be used to store posgres data
      existingClaimName: zabbix-db-pvc
      # -- Size of the PVC to be automatically generated
      storageSize: 5Gi
      # -- Kubernetes uses volume access modes to match PersistentVolumeClaims and PersistentVolumes. See: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
      claim_access_mode: "ReadWriteOnce"
      # -- Storage PVC storageclass to use
      storageClass: nfs-zabbix-db
    service:
      # -- Type of service to expose the application. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
      # More details: https://kubernetes.io/docs/concepts/services-networking/service/
      type: ClusterIP
      # -- clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, 
      #is in-range (as per system configuration), and is not in use, it will be allocated to the service.
      clusterIP:
      # -- Port of service in Kubernetes cluster
      port: 5432
      # -- Annotations for the zabbix-server service
      annotations: {}
      # metallb.universe.tf/address-pool: production-public-ips
    # -- Extra Postgresql runtime parameters ("-c" options)
    extraRuntimeParameters:
      max_connections: 50
    # -- Extra environment variables. A list of additional environment variables.
    extraEnv: []
    # -- Annotations to add to the statefulset
    statefulSetAnnotations: {}
    # -- Labels to add to the statefulset
    statefulSetLabels: {}
    # -- Annotations to add to the containers
    containerAnnotations: {}
    # -- Labels to add to the containers
    containerLabels: {}
    # -- Additional volumeMounts to the postgresql container
    extraVolumeMounts: []
    # -- Additional containers to start within the postgresql pod
    extraContainers: []
    # -- Additional init containers to start within the postgresql pod
    extraInitContainers: []
    # -- Additional volumes to make available to the postgresql pod
    extraVolumes: []
    # -- Additional specifications to the postgresql pod
    extraPodSpecs: {}
    # -- Security Context configurations. Reference: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    securityContext: {}
    # -- The kubelet uses liveness probes to know when to restart a container. Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe: {}
    # -- The kubelet uses readiness probes to know when a container is ready to start accepting traffic. Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    readinessProbe: {}
    # -- The kubelet uses startup probes to know when a container application has started.  Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    startupProbe: {}

# **Zabbix Agent** configurations
  zabbixAgent:
    # -- Enables use of **Zabbix Agent**
    enabled: true
    # -- Its is a default mode. Zabbix-agent will run as sidecar in zabbix-server and zabbix-proxy pods. Disable this mode if you want to run zabbix-agent as daemonSet
    runAsSidecar: true
    # -- Enable this mode if you want to run zabbix-agent as daemonSet. The 'zabbixAgent.runAsSidecar' option must be false.
    runAsDaemonSet: false
    # -- Requests and limits of pod resources. See: [https://kubernetes.io/docs/concepts/configuration/manage-resources-containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers)
    resources: {}
    image:
      # -- Zabbix Agent Docker image name. Can use zabbix/zabbix-agent or zabbix/zabbix-agent2
      repository: zabbix/zabbix-agent2
      # -- Zabbix Agent Docker image tag, if you want to override zabbixImageTag
      tag: alpine-6.0-latest
      # -- Pull policy of Docker image
      pullPolicy: IfNotPresent
      # -- List of dockerconfig secrets names to use when pulling images
      pullSecrets: []
    # -- Zabbix Server host
    ZBX_SERVER_HOST: 0.0.0.0/0
    # -- Zabbix Server port
    ZBX_SERVER_PORT: 10051
    # -- This variable is boolean (true or false) and enables or disables feature of passive checks. By default, value is true
    ZBX_PASSIVE_ALLOW: true
    # -- The variable is comma separated list of allowed Zabbix Server or proxy hosts for connections to Zabbix Agent container. Example: Server=127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.example.com
    #ZBX_PASSIVESERVERS: ''
    # -- This variable is boolean (true or false) and enables or disables feature of active checks
    ZBX_ACTIVE_ALLOW: false
    # -- The variable is comma separated list of allowed Zabbix Server or proxy hosts for connections to Zabbix Agent container. You may specify port.
    #ZBX_ACTIVESERVERS: ''
    # -- The variable is list of comma separated loadable Zabbix modules. It works with volume /var/lib/zabbix/modules.
    #ZBX_LOADMODULE: dummy1.so,dummy2.so
    # -- The variable is used to specify debug level, from 0 to 5
    ZBX_DEBUGLEVEL: 3
    # -- The variable is used to specify timeout for processing checks. By default, value is 4.
    ZBX_TIMEOUT: 4
    service:
      # -- Type of service to expose the application. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. 
      #More details: https://kubernetes.io/docs/concepts/services-networking/service/
      type: ClusterIP
      # -- clusterIP is the IP address of the service and is usually assigned randomly. 
      #If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service.
      clusterIP:
      # -- externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses 
      #(NodePorts, ExternalIPs, and LoadBalancer IPs). "Local" to preserve sender's IP address. Please note that this might not work on multi-node clusters, 
      #depending on your network settings.
      #externalTrafficPolicy: Local
      # -- externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service. 
      #These IPs are not managed by Kubernetes.
      externalIPs: []
      # -- Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying 
      #the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
      loadBalancerIP: ""
      # -- If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer 
      #will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.
      loadBalancerSourceRanges: []
      # -- loadBalancerClass is the class of the load balancer implementation this Service belongs to. 
      #If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or 
      #"example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. 
      #If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, 
      #but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services 
      #with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. 
      #This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. 
      #This field will be wiped when a service is updated to a non 'LoadBalancer' type.
      loadBalancerClass: ""
      # -- Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. 
      #Must be ClientIP or None. Defaults to None. More info: 
      #https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      sessionAffinity: None
      # -- Port of service in Kubernetes cluster
      port: 10050
      # -- NodePort port to allocate on each node (only if service.type = NodePort or Loadbalancer)
      nodePort: 31050
      # -- Annotations for the zabbix-agent service
      annotations: {}
      # metallb.universe.tf/address-pool: production-public-ips
    # -- If true, agent pods mounts host / at /host/root
    hostRootFsMount: true
    # -- Extra environment variables. A list of additional environment variables. List can be extended with other environment variables listed here: https://github.com/zabbix/zabbix-docker/tree/6.0/Dockerfiles/agent2/alpine#environment-variables. See example: https://github.com/zabbix-community/helm-zabbix/blob/master/charts/zabbix/docs/example/kind/values.yaml
    extraEnv: []
    # -- Additional volumeMounts to the zabbix Agent container
    extraVolumeMounts: []
    # -- Annotations to add to the daemonSet
    daemonSetAnnotations: {}
    # -- Labels to add to the daemonSet
    daemonSetLabels: {}
    # -- Labels to add to the deployment
    deploymentLabels: {}
    # -- Annotations to add to the containers
    containerAnnotations: {}
    # -- Labels to add to the containers
    containerLabels: {}
    # -- Additional containers to start within the Zabbix Agent pod
    extraContainers: []
    # -- Additional init containers to start within the Zabbix Agent pod
    extraInitContainers: []
    # -- Additional volumes to make available to the Zabbix Agent pod
    extraVolumes: []
    # -- Additional specifications to the Zabbix Agent pod
    extraPodSpecs: {}
    # -- Security Context configurations. Reference: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    securityContext: {}
    # -- The kubelet uses liveness probes to know when to restart a container. Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe:
      tcpSocket:
        # -- Port number/alias name of the container
        port: zabbix-agent
      timeoutSeconds: 3
      failureThreshold: 3
      periodSeconds: 10
      successThreshold: 1
    # -- The kubelet uses readiness probes to know when a container is ready to start accepting traffic. Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    readinessProbe: {}
    # -- The kubelet uses startup probes to know when a container application has started.  Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    startupProbe:
      tcpSocket:
        # -- Port number/alias name of the container
        port: zabbix-agent
      initialDelaySeconds: 15
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 5
      successThreshold: 1

# **Zabbix Web** configurations
  zabbixWeb:
    # -- Enables use of **Zabbix Web**
    enabled: true
    # -- Number of replicas of ``zabbixWeb`` module
    replicaCount: 1
    # -- set permissive podAntiAffinity to spread replicas over cluster nodes if replicaCount>1
    podAntiAffinity: true
    # -- Requests and limits of pod resources. See: [https://kubernetes.io/docs/concepts/configuration/manage-resources-containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers)
    resources: {}
    image:
      # -- Zabbix Web Docker image name
      repository: zabbix/zabbix-web-nginx-pgsql
      # -- Zabbix Web Docker image tag, if you want to override zabbixImageTag
      tag: null
      # -- Pull policy of Docker image
      pullPolicy: IfNotPresent
      # -- List of dockerconfig secrets names to use when pulling images
      pullSecrets: []
    # -- Certificate containing certificates for SAML configuration
    #samlCertsSecretName: zabbix-web-samlcerts
    service:
      # -- Type of service to expose the application. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. 
      #More details: https://kubernetes.io/docs/concepts/services-networking/service/
      type: ClusterIP
      # -- clusterIP is the IP address of the service and is usually assigned randomly. 
      #If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service.
      clusterIP:
      # -- externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's "externally-facing" addresses 
      #(NodePorts, ExternalIPs, and LoadBalancer IPs). "Local" to preserve sender's IP address. Please note that this might not work on multi-node clusters, 
      #depending on your network settings.
      #externalTrafficPolicy: Local
      # -- externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service. 
      #These IPs are not managed by Kubernetes.
      externalIPs: []
      # -- Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying 
      #the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
      loadBalancerIP: ""
      # -- If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer 
      #will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.
      loadBalancerSourceRanges: []
      # -- loadBalancerClass is the class of the load balancer implementation this Service belongs to. 
      #If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. "internal-vip" or 
      #"example.com/internal-vip". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. 
      #If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, 
      #but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services 
      #with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. 
      #This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. 
      #This field will be wiped when a service is updated to a non 'LoadBalancer' type.
      loadBalancerClass: ""
      # -- Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. 
      #Must be ClientIP or None. Defaults to None. More info: 
      #https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      sessionAffinity: None    # -- Port of service in Kubernetes cluster
      port: 80
      # -- NodePort port to allocate on each node (only if service.type = NodePort or Loadbalancer)
      nodePort: 31080
      # -- Annotations for the Zabbix Web
      annotations: {}
      # metallb.universe.tf/address-pool: production-public-ips
    # -- Extra environment variables. A list of additional environment variables. List can be extended with other environment variables listed here: https://github.com/zabbix/zabbix-docker/tree/6.0/Dockerfiles/web-apache-pgsql/alpine#environment-variables. See example: https://github.com/zabbix-community/helm-zabbix/blob/master/charts/zabbix/docs/example/kind/values.yaml
    extraEnv: []
    #- name: ZBX_SSO_SETTINGS
    #  value: '{"baseurl": "https://zabbix.example.com"}'
    #- name: ZBX_SERVER_NAME
    #  value: Demo Zabbix
    # -- Annotations to add to the deployment
    deploymentAnnotations: {}
    # -- Labels to add to the deployment
    deploymentLabels: {}
    # -- Annotations to add to the containers
    containerAnnotations: {}
    # -- Labels to add to the containers
    containerLabels: {}
    # -- Additional volumeMounts to the Zabbix Web container
    extraVolumeMounts: []
    # -- Additional containers to start within the Zabbix Web pod
    extraContainers: []
    # -- Additional init containers to start within the Zabbix Web pod
    extraInitContainers: []
    # -- Additional volumes to make available to the Zabbix Web pod
    extraVolumes: []
    # -- Additional specifications to the Zabbix Web pod
    extraPodSpecs: {}
    # -- Security Context configurations. Reference: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    securityContext: {}
    livenessProbe:
      httpGet:
        # -- Path of health check of application
        path: /
        # -- Port number/alias name of the container
        port: zabbix-web
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1
    readinessProbe:
      httpGet:
        # -- Path of health check of application
        path: /
        # -- Port number/alias name of the container
        port: zabbix-web
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1
    # -- The kubelet uses startup probes to know when a container application has started.  Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    startupProbe: {}

# **Zabbix Web Service** configurations
  zabbixWebService:
    # -- Enables use of **Zabbix Web Service**
    enabled: false 

# Ingress configurations
  ingress:
    # -- Enables Ingress
    enabled: true
    # -- Ingress annotations
    annotations:
      # letsencrypt 설정
      cert-manager.io/cluster-issuer: "letsencrypt"
      cert-manager.io/acme-challenge-type: http01
      nginx.ingress.kubernetes.io/rewrite-target: /$2
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    hosts:
      - host: zabbix-k8s.duckdns.org
        paths:
          - path: /zabbix(/|$)(.*)
            pathType: ImplementationSpecific
    # -- Ingress TLS configuration
    tls:
      - secretName: zabbix-secret
        hosts:
          - zabbix-k8s.duckdns.org
    ingressClassName: nginx
    pathType: Prefix

# -- nodeSelector configurations. Reference: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  nodeSelector: {}

# -- Tolerations configurations. Reference: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  tolerations: []

# -- Affinity configurations. Reference: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  affinity: {}

# -- Security Context configurations. Reference: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  securityContext: {}

  serviceAccount:
    # -- Specifies whether a service account should be created.
    create: true
    # -- The name of the service account to use. If not set and create is true, a name is generated using the fullname template.
    name: ""
    # -- Optional additional annotations to add to the Service Account.
    annotations: {}
    # -- Optional additional labels to add to the Service Account.
    labels: {}
    # -- Automount API credentials for a Service Account.
    automountServiceAccountToken: true

  rbac:
    # -- Specifies whether the RBAC resources should be created
    create: true
    additionalRulesForClusterRole: []
    #  - apiGroups: [ "" ]
    #    resources:
    #      - nodes/proxy
    #    verbs: [ "get", "list", "watch" ]

